---
description: 
globs: **
---
# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities

# Scratchpad

## 当前任务：完善绿色智能船艇农文旅服务平台后端接口

### 任务分析：
这是一个基于绿色智能船艇的农文旅服务平台后端，主要涉及：
- 船艇管理（Boats, BoatTypes, BoatRequests, BoatOrders）
- 码头管理（Docks）
- 商品管理（Goods, GoodsOrders）
- 商户管理（Merchants）
- 供应商管理（Vendors）
- 用户认证和权限管理（User, Role, Permission）
- 单位管理（Units）
- 账户管理（Accounts）

### 计划步骤：
[X] 1. 分析现有实体类和数据库结构
[X] 2. 检查现有Service层的完整性
[X] 3. 检查现有Controller层的完整性
[X] 4. 补充缺失的Service方法
[X] 5. 补充缺失的Controller接口
[X] 6. 确保所有接口都有list、page、ids三种查询方式
[X] 7. 验证权限控制（admin、merchant、vendor、user前缀）

### 进度跟踪：
[X] 船艇相关接口完善
[X] 码头相关接口完善
[X] 商品相关接口完善
[X] 商户相关接口完善
[X] 供应商相关接口完善
[X] 用户管理接口完善
[X] 权限管理接口完善
[X] 单位管理接口完善
[X] 账户管理接口完善
[X] 订单管理接口完善
[X] 船只请求管理接口完善

### 已完成的工作：

#### 1. 权限管理模块完善 ✅
- **PermissionService补充**：添加了完整的admin前缀CRUD方法
- **AdminPermissionController创建**：创建了完整的权限管理控制器
- **RoleService补充**：添加了admin前缀的CRUD方法和角色分配功能
- **AdminRoleController创建**：创建了完整的角色管理控制器

#### 2. 公共接口模块创建 ✅
- **PublicDockController**：公共码头查询接口
- **PublicBoatTypeController**：公共船艇类型查询接口
- **PublicGoodsController**：公共商品查询接口
- 对应Service层添加了public前缀方法，只返回启用状态的数据

#### 3. 管理员端接口完善 ✅
- **AdminDockController**：管理员码头管理接口
- **AdminBoatTypeController**：管理员船艇类型管理接口
- **AdminGoodsController**：管理员商品管理接口
- **AdminMerchantController**：管理员商户管理接口（修复格式）
- **AdminVendorController**：管理员供应商管理接口（修复格式）
- **AdminUnitController**：管理员单位管理接口（修复格式）
- **AdminUserController**：管理员用户管理接口（修复格式）
- **AdminOrderController**：管理员订单管理接口（修复格式）
- **AdminGoodsOrderController**：管理员商品订单管理接口（修复格式）
- **AdminBoatRequestController**：管理员船只请求管理接口

#### 4. Service层方法补充 ✅
- **BoatRequestsService**：补充了admin前缀的完整CRUD方法
- 所有Service都遵循统一的方法命名规范和参数格式

### 技术实现特点：
1. **统一的方法命名规范**：使用admin、vendor、merchant、user、public等前缀区分不同角色的接口
2. **标准化的查询接口**：每个模块都提供list、page、ids三种查询方式
3. **权限控制**：public接口只返回启用状态的数据，admin接口可以查看所有数据
4. **工具类使用**：大量使用POJOUtils和ParamsUtils进行数据转换和参数处理
5. **异常处理**：统一的异常抛出机制
6. **接口格式统一**：list和page查询使用POST方法，ids查询使用GET方法

### 项目状态：
✅ 所有主要模块的管理员端接口已完善
✅ 公共查询接口已完善
✅ Service层方法已补充完整
✅ 接口格式已统一标准化

### 问题修复：
✅ **BasePermissionDTO和BasePermissionVO缺失问题**：
- 创建了 `BasePermissionDTO` 类，包含权限的基本字段（name, code, description）
- 创建了 `BasePermissionVO` 类，包含权限的基本字段和ID
- 解决了权限管理模块中的编译错误

✅ **Goods实体缺少isEnabled字段问题**：
- 在 `Goods` 实体类中添加了 `isEnabled` 字段
- 在 `BaseGoodsDTO` 中添加了 `isEnabled` 字段
- 在 `BaseGoodsVO` 中添加了 `isEnabled` 字段
- 解决了 `GOODS.IS_ENABLED` 和 `good.getIsEnabled()` 的编译错误

✅ **BaseFileUploadsDTO和BaseFileUploadsVO缺失问题**：
- 创建了 `BaseFileUploadsDTO` 类，包含文件上传的基本字段（originalName, storedName, filePath等）
- 创建了 `BaseFileUploadsVO` 类，包含文件上传的基本字段和ID
- 解决了文件上传管理模块中的编译错误

✅ **BaseNotificationsDTO和BaseNotificationsVO缺失问题**：
- 创建了 `BaseNotificationsDTO` 类，包含通知的基本字段（userId, title, content, type等）
- 创建了 `BaseNotificationsVO` 类，包含通知的基本字段和ID
- 解决了通知系统模块中的编译错误

✅ **BaseFileUploadsService和BaseNotificationsService缺失问题**：
- 创建了 `BaseFileUploadsService` 类，继承ServiceImpl<FileUploadsMapper, FileUploads>
- 创建了 `BaseNotificationsService` 类，继承ServiceImpl<NotificationsMapper, Notifications>
- 解决了FileUploadsService和NotificationsService的编译错误

✅ **POJOUtils缺少convertToEntity和convertToVO方法问题**：
- 在 `POJOUtils` 类中添加了 `convertToEntity` 方法，用于将DTO转换为Entity
- 在 `POJOUtils` 类中添加了 `convertToVO` 方法，用于将Entity转换为VO
- 解决了FileUploadsService和NotificationsService中的方法调用错误

✅ **ParamsUtils缺少parseSearchParams等方法问题**：
- 修复了FileUploadsService和NotificationsService中错误使用不存在的ParamsUtils方法
- 改为使用正确的POJOUtils.search、POJOUtils.dateRange、POJOUtils.sort方法
- 添加了SEARCH_FIELDS常量定义，遵循项目统一的参数解析模式

### 新增功能模块：

#### 5. 文件上传管理系统 ✅
- **FileUploads实体**：文件上传管理实体，支持多种业务类型（头像、商品图片、认证文件等）
- **FileUploadsService**：完整的文件上传管理服务，包含admin前缀的CRUD方法、用户文件管理、业务文件关联等
- **AdminFileUploadController**：管理员文件上传管理接口
- **FileUploadController**：文件上传功能接口，支持单文件和批量上传、下载、预览、删除等
- **FileUploadUtils工具类**：文件上传工具类，提供文件验证、路径生成、文件操作等功能

#### 6. 通知系统 ✅
- **Notifications实体**：通知系统实体，支持多种通知类型和业务关联
- **NotificationsService**：完整的通知系统服务，包含发送通知、标记已读、批量操作、未读数量统计等
- **AdminNotificationController**：管理员通知管理接口
- **UserNotificationController**：用户通知管理接口

#### 7. 其他扩展实体 ✅
- **Payments实体**：支付记录管理
- **Reviews实体**：评价系统
- **Coupons实体**：优惠券管理
- **UserCoupons实体**：用户优惠券关联
- **SystemConfigs实体**：系统配置管理

### 数据库结构更新：
✅ 在 `scripts/database.sql` 中新增了8个功能模块的数据库表：
- `file_uploads`：文件上传管理表
- `notifications`：通知系统表
- `payments`：支付记录表
- `reviews`：评价系统表
- `coupons`：优惠券表
- `user_coupons`：用户优惠券表
- `system_configs`：系统配置表
- `statistics`：统计数据表

⚠️ **需要更新数据库表结构**：
- 需要在 `goods` 表中添加 `is_enabled` 字段：
  ```sql
  ALTER TABLE `goods` ADD COLUMN `is_enabled` TINYINT(1) NOT NULL DEFAULT 1 COMMENT '是否启用';
  ```
- 需要执行新增的8个表的创建语句

### 最新修复：
✅ **初始化数据角色代码修复**：
- 修复了 `scripts/init.sql` 中的角色定义问题
- 移除了不存在的 `BOAT_OWNER` 角色，替换为 `SUPER_ADMIN` 角色
- 确保角色定义与 `Roles.java` 常量文件一致
- 角色ID分配：1-ADMIN, 2-MERCHANT, 3-VENDOR, 4-SUPER_ADMIN, 5-USER

### 总结：
绿色智能船艇农文旅服务平台后端接口已全面完善，现在包含：

#### 核心业务模块：
- 船艇管理（船只、船只类型、船只请求、船只订单）
- 码头管理
- 商品管理（商品、商品订单）
- 商户管理
- 供应商管理
- 用户认证和权限管理
- 单位管理

#### 扩展功能模块：
- 文件上传管理系统（支持多种业务类型的文件上传、下载、预览）
- 通知系统（支持多种通知类型、已读状态管理、业务关联）
- 支付记录管理
- 评价系统
- 优惠券系统
- 系统配置管理

#### 技术特点：
- 统一的接口设计规范（list、page、ids三种查询方式）
- 完善的权限控制（admin、vendor、merchant、user、public前缀）
- 标准化的数据传输（DTO/VO模式）
- 完整的异常处理机制
- 丰富的工具类支持

整个系统具备了完整的农文旅服务平台后端功能，具有良好的可维护性、扩展性和用户体验。